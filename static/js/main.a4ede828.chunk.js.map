{"version":3,"sources":["helpers/constants.js","Game.js","Timer.js","HowPlay.js","helpers/ApiMoovieDBHelper.js","Play.js","App.js","redux/store.js","index.js"],"names":["API_KEY_MOVIE_DB","URL_POSTER_PATH_MOVIE","URL_FETCH_API_MOVIES_V3","useStyles","makeStyles","mainContainer","display","alignItems","imgHeight","height","Game","props","score","setScore","setStopGame","movies","actors","classes","useState","movie","setMovie","actor","setActor","activeUseEffect","setActiveUseEffect","useEffect","a","randomMovie","sample","setSampleMovie","then","getRandomActorOrMovieActor","Math","round","random","randomActorMovie","cast","randomActor","checkResponse","responseBool","find","id","Box","component","p","className","profile_path","src","alt","name","poster_path","title","Button","variant","onClick","Timer","seconds","setSeconds","isActive","setIsActive","stopGame","reset","scoreStorage","localStorage","getItem","setItem","interval","setInterval","clearInterval","disabled","HowPlay","myInit","method","mode","getActorsListWithImg","actorsArr","n","fetch","res","json","push","results","actorsflatten","uniq","flatten","actorsWithImg","filter","length","getMoviesAndCast","moviesListRes","moviesList","items","map","movieCredit","promiseMovies","Promise","all","resMovies","filterActorNotInMovie","moviesCast","moviesCastUnion","filterActors","initializeGame","actorsWithNoMovie","Play","bestScore","setBestScore","dispatch","useDispatch","loading","useSelector","state","type","bestScoreStorage","sx","CircularProgress","App","initialState","reducer","action","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a4ede828.chunk.js","sourcesContent":["export const API_KEY_MOVIE_DB = '7ea5f490261a949e52930517e1b4657c';\nexport const URL_POSTER_PATH_MOVIE = \"https://image.tmdb.org/t/p/original\";\nexport const URL_FETCH_API_MOVIES_V3 = 'https://api.themoviedb.org/3/'\n","import React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@mui/styles\";\nimport Box from \"@material-ui/core/Box\";\nimport sample from \"lodash/sample\";\nimport find from \"lodash/find\";\nimport { URL_POSTER_PATH_MOVIE } from \"./helpers/constants\";\n\nimport Button from \"@material-ui/core/Button\";\n\nconst useStyles = makeStyles({\n  mainContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  imgHeight: {\n    height: 200,\n  },\n});\n\nconst Game = (props) => {\n  const { score, setScore, setStopGame, movies, actors } = props;\n\n  const classes = useStyles();\n\n  const [movie, setMovie] = useState({});\n  const [actor, setActor] = useState({});\n  const [activeUseEffect, setActiveUseEffect] = useState(0);\n\n  useEffect(() => {\n    async function setSampleMovie() {\n      const randomMovie = sample(movies);\n      setMovie(randomMovie);\n      return randomMovie;\n    }\n    setSampleMovie().then((randomMovie) => {\n      getRandomActorOrMovieActor(actors, randomMovie).then((actor) =>\n        setActor(actor)\n      );\n    });\n  }, [activeUseEffect]);\n\n  const getRandomActorOrMovieActor = async (actors, randomMovie) => {\n    const random0or1 = Math.round(Math.random());\n    if (random0or1 === 0) {\n      const randomActorMovie = sample(randomMovie.cast);\n      return randomActorMovie;\n    } else {\n      const randomActor = sample(actors);\n      return randomActor;\n    }\n  };\n\n  const checkResponse = async (responseBool) => {\n    const isActing = find(movie.cast, { id: actor.id }) ? true : false;\n    if (isActing === responseBool) {\n      setScore(score + 1);\n    } else {\n      setStopGame(true);\n    }\n    setActiveUseEffect(activeUseEffect + 1);\n  };\n\n  return (\n    <Box component=\"div\" p={10}>\n      <div className={classes.mainContainer}>\n        {actor && actor.profile_path && (\n          <Box component=\"div\" p={5}>\n            <img\n              src={URL_POSTER_PATH_MOVIE + actor.profile_path}\n              alt=\"actor_img\"\n              className={classes.imgHeight}\n            />\n            <br />\n            <span>{actor.name}</span>\n          </Box>\n        )}\n        <span>joue dans </span>\n        {movie && movie.poster_path && (\n          <Box component=\"div\" p={5}>\n            <img\n              src={URL_POSTER_PATH_MOVIE + movie.poster_path}\n              alt=\"poster_path\"\n              className={classes.imgHeight}\n            />\n            <br />\n            <span>{movie.title}</span>\n          </Box>\n        )}\n        <span>? </span>\n      </div>\n      <Button variant=\"outlined\" onClick={() => checkResponse(true)}>\n        Vrai\n      </Button>\n      <Button variant=\"outlined\" onClick={() => checkResponse(false)}>\n        Faux\n      </Button>\n    </Box>\n  );\n};\n\nexport default Game;\n","import React, { useEffect } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Box from \"@material-ui/core/Box\";\n\nconst Timer = (props) => {\n  const {\n    seconds,\n    setSeconds,\n    isActive,\n    setIsActive,\n    setScore,\n    score,\n    stopGame,\n    setStopGame,\n  } = props;\n\n  const toggle = () => {\n    setIsActive(!isActive);\n    setScore(0);\n  };\n\n  const reset = () => {\n    setSeconds(0);\n    setIsActive(false);\n    setScore(0);\n    const scoreStorage = localStorage.getItem(\"bestScore\");\n    if (!scoreStorage || scoreStorage < score) {\n      localStorage.setItem(\"bestScore\", score);\n    }\n  };\n\n  useEffect(() => {\n    let interval = null;\n    if (isActive) {\n      interval = setInterval(() => {\n        setSeconds((seconds) => seconds + 1);\n      }, 1000);\n      if (seconds === 60) {\n        reset();\n      }\n      if (stopGame) {\n        reset();\n        setStopGame(false);\n      }\n    } else if (!isActive && seconds !== 0) {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [isActive, seconds, stopGame]);\n\n  return (\n    <Box component=\"div\" p={10}>\n      <div className=\"time\">{seconds}s</div>\n      <Button variant=\"outlined\" onClick={toggle} disabled={isActive}>\n        Start\n      </Button>\n      <Button variant=\"outlined\" onClick={reset}>\n        Reset\n      </Button>\n    </Box>\n  );\n};\n\nexport default Timer;\n","import React from 'react'\nimport Box from '@material-ui/core/Box';\n\nexport const HowPlay = (props) => {\n    return (\n        <Box component=\"div\" p={10} >\n            Règle du jeu:\n\n            Cliquer sur start et un compteur de 60 secondes se lancera.\n            <br/>\n            Vous devez répondre si un acteur joue dans un film par vrai ou faux.\n            <br/>\n\n            Si vous répondez mal la partie prend fin.\n            <br/>\n\n            Bon chance \n        </Box>\n    )\n}\n\nexport default HowPlay\n","// import sample from \"lodash/sample\";\nimport flatten from \"lodash/flatten\";\nimport uniq from \"lodash/uniq\";\nimport find from \"lodash/find\";\nimport {\n  API_KEY_MOVIE_DB,\n  // URL_POSTER_PATH_MOVIE,\n  URL_FETCH_API_MOVIES_V3,\n} from \"./constants\";\n\nconst myInit = {\n  method: \"GET\",\n  mode: \"cors\",\n};\n\n// const getRamdomActor = async () => {\n//   // fetch les acteurs populaire\n//   const actors = await fetch(\n//     `${URL_FETCH_API_MOVIES_V3}person/popular?api_key=${API_KEY_MOVIE_DB}&language=en-US&page=1`,\n//     myInit\n//   ).then((res) => res.json());\n//   // prendre un acteur random\n//   const randomActor = actors.results.map((actor) => {\n//     return {\n//       name: actor.name,\n//       photo: URL_POSTER_PATH_MOVIE + actor.profile_path,\n//     };\n//   });\n//   // random entre 0 et 20\n//   const random_0_20 = parseInt(Math.random() * (20 - 1) + 1);\n//   return randomActor[random_0_20];\n// };\n\n// const getRandomMovieDetails = async () => {\n//   //fetch une liste de film\n//   const moviesList = await fetch(\n//     `\n//     ${URL_FETCH_API_MOVIES_V3}list/1?api_key=${API_KEY_MOVIE_DB}&language=en-US`,\n//     myInit\n//   ).then((res) => res.json());\n//   // prendre un film random dans la liste\n//   const randomMovie = sample(moviesList.items);\n//   // fetch ses acteurs\n//   const movieCredit = await fetch(\n//     `\n//     ${URL_FETCH_API_MOVIES_V3}movie/${randomMovie.id}/credits?api_key=${API_KEY_MOVIE_DB}&language=en-US`,\n//     myInit\n//   ).then((res) => res.json());\n//   // filtrer pour recup que les acteurs du film\n//   const movieActors = movieCredit.cast\n//     .filter((el) => el.known_for_department === \"Acting\")\n//     .map((person) => {\n//       return {\n//         name: person.name,\n//         photo: URL_POSTER_PATH_MOVIE + person.profile_path,\n//       };\n//     });\n//   // retourner un objet avec le film, la couv et les acteurs\n//   return {\n//     title: randomMovie.title,\n//     couv: URL_POSTER_PATH_MOVIE + randomMovie.poster_path,\n//     actors: movieActors,\n//   };\n// };\n\nconst getActorsListWithImg = async () => {\n  // fetch les 3 premieres pages d'acteurs\n  let actorsArr = [];\n  let n = 1;\n  while (n < 12) {\n    // fetch les acteurs populaire\n    const actors = await fetch(\n      `${URL_FETCH_API_MOVIES_V3}person/popular?api_key=${API_KEY_MOVIE_DB}&language=en-US&page=${n}`,\n      myInit\n    ).then((res) => res.json());\n    actorsArr.push(actors.results);\n    n++;\n  }\n  // Assembler les listes\n  const actorsflatten = uniq(flatten(actorsArr));\n  const actorsWithImg = actorsflatten.filter(\n    (actor) => actor.profile_path && actor.profile_path.length > 0\n  );\n  return actorsWithImg;\n};\n\nconst getMoviesAndCast = async () => {\n  // fetch une liste de film\n  const moviesListRes = await fetch(\n    `\n  ${URL_FETCH_API_MOVIES_V3}list/1?api_key=${API_KEY_MOVIE_DB}&language=en-US`,\n    myInit\n  ).then((res) => res.json());\n  // Recup juste la liste\n  const moviesList = moviesListRes.items;\n  // Fetch les acteurs des films et les intégré dans les objets film\n  const promiseMovies = await moviesList.map(async (movie) => {\n    // fetch cast\n    const movieCredit = await fetch(\n      `\n    ${URL_FETCH_API_MOVIES_V3}movie/${movie.id}/credits?api_key=${API_KEY_MOVIE_DB}&language=en-US`,\n      myInit\n    ).then((res) => res.json());\n    const actorsWithImg = movieCredit.cast.filter(\n      (actor) => actor.profile_path && actor.profile_path.length > 0\n    );\n    return {\n      ...movie,\n      cast: actorsWithImg,\n    };\n  });\n  const resMovies = await Promise.all(promiseMovies);\n  return resMovies;\n};\n\nconst filterActorNotInMovie = async (actors, movies) => {\n  const moviesCast = movies.map((movie) => movie.cast);\n  const moviesCastUnion = flatten(moviesCast);\n\n  // filter actors who are not in movie\n  const filterActors = actors.filter((actor) =>\n    find(moviesCastUnion, { id: actor.id })\n  );\n  return filterActors;\n};\n\nconst initializeGame = async () => {\n  // fetch movies and cast\n  const movies = await getMoviesAndCast();\n\n  // fetch liste des acteurs\n  const actors = await getActorsListWithImg();\n\n  // retirer les acteurs qui se trouvent dans les casts des films\n  const actorsWithNoMovie = await filterActorNotInMovie(actors, movies);\n\n  return {\n    movies,\n    actorsWithNoMovie,\n  };\n};\n\nexport { initializeGame };\n","import React, { useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Box from \"@material-ui/core/Box\";\nimport Game from \"./Game\";\nimport Timer from \"./Timer\";\nimport HowPlay from \"./HowPlay\";\nimport { initializeGame } from \"./helpers/ApiMoovieDBHelper\";\n\nconst Play = (props) => {\n  const [seconds, setSeconds] = useState(0);\n  const [isActive, setIsActive] = useState(false);\n  const [stopGame, setStopGame] = useState(false);\n  const [score, setScore] = useState(0);\n  const [bestScore, setBestScore] = useState(0);\n\n  const dispatch = useDispatch();\n\n  const loading = useSelector((state) => state);\n  const { movies } = useSelector((state) => state);\n  const { actors } = useSelector((state) => state);\n\n  useEffect(() => {\n    dispatch({ type: \"SET_LOADING_GAME\" });\n    initializeGame().then((res) => {\n      dispatch({\n        type: \"FILL_MOVIES\",\n        movies: res.movies,\n      });\n      dispatch({\n        type: \"FILL_ACTORS\",\n        actors: res.actorsWithNoMovie,\n      });\n      dispatch({ type: \"SET_LOADING_GAME\" });\n    });\n    const bestScoreStorage = localStorage.getItem(\"bestScore\");\n    setBestScore(bestScoreStorage);\n  }, [isActive]);\n\n  return (\n    <div>\n      {loading.loading ? (\n        <Box sx={{ display: \"flex\" }}>\n          <CircularProgress />\n        </Box>\n      ) : (\n        <div>\n          <Box component=\"span\" p={10}>\n            Best score : {bestScore}\n          </Box>\n          <br />\n          <br />\n          <Box component=\"span\" p={10}>\n            Score: {score}\n          </Box>\n          {isActive && (\n            <Game\n              score={score}\n              setScore={setScore}\n              setStopGame={setStopGame}\n              movies={movies}\n              actors={actors}\n            />\n          )}\n          <br />\n          {!isActive && <HowPlay />}\n          <Timer\n            seconds={seconds}\n            setSeconds={setSeconds}\n            isActive={isActive}\n            setIsActive={setIsActive}\n            setScore={setScore}\n            score={score}\n            stopGame={stopGame}\n            setStopGame={setStopGame}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Play;\n","import Play from \"./Play\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <Play />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const initialState = {\n  movies: [],\n  actors: [],\n  loading: false,\n};\n\nfunction reducer(state = initialState, action) {\n  switch (action.type) {\n    case \"FILL_MOVIES\":\n      return {\n        ...state,\n        movies: action.movies,\n      };\n    case \"FILL_ACTORS\":\n      return {\n        ...state,\n        actors: action.actors,\n      };\n    case \"SET_LOADING_GAME\":\n      return {\n        ...state,\n        loading: !state.loading,\n      };\n    default:\n      return state;\n  }\n}\n\nexport default reducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport App from \"./App\";\nimport reducer from \"./redux/store.js\";\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}